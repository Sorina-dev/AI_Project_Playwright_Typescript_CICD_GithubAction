import { test } from '@playwright/test';
import { LoginPage } from '../src/pages/LoginPage';
import { validCredentials } from '../src/data/testData';

/**
 * üéì INTERACTIVE POM LEARNING GUIDE
 * 
 * Run this test to see step-by-step how POM works!
 * Each test demonstrates a key POM concept with detailed explanations.
 */

test.describe('üéì POM Learning Guide - Interactive Examples', () => {

  test('üìñ Lesson 1: What is a Page Object?', async ({ page }) => {
    console.log('='.repeat(60));
    console.log('üìñ LESSON 1: Understanding Page Objects');
    console.log('='.repeat(60));
    
    console.log('ü§î Question: What is a Page Object?');
    console.log('üí° Answer: A class that represents a web page and its elements');
    console.log('');
    
    console.log('üîß Creating a LoginPage object...');
    const loginPage = new LoginPage(page);
    console.log('‚úÖ Created! This object contains:');
    console.log('   üìç Locators (how to find elements)');
    console.log('   üé¨ Methods (actions you can do)');
    console.log('   ‚úÖ Assertions (ways to check page state)');
    console.log('');
    
    await loginPage.navigateToLoginPage();
    console.log('üåê Navigated to login page using POM!');
    console.log('üí° Instead of: page.goto("long-url...")');
    console.log('üí° We used: loginPage.navigateToLoginPage()');
  });

  test('üìñ Lesson 2: Locators - Finding Elements', async ({ page }) => {
    console.log('='.repeat(60));
    console.log('üìñ LESSON 2: Understanding Locators');
    console.log('='.repeat(60));
    
    const loginPage = new LoginPage(page);
    await loginPage.navigateToLoginPage();
    
    console.log('üîç Locators are defined in the page object constructor:');
    console.log('   this.usernameInput = page.locator("#username")');
    console.log('   this.passwordInput = page.locator("#password")');
    console.log('   this.loginButton = page.locator("button[type=submit]")');
    console.log('');
    
    console.log('üí° Benefits:');
    console.log('   ‚úÖ Centralized - all selectors in one place');
    console.log('   ‚úÖ Reusable - multiple methods can use same locator');
    console.log('   ‚úÖ Maintainable - change selector once, works everywhere');
    console.log('');
    
    console.log('üéØ Testing locators by filling form...');
    await loginPage.fillUsername('demo-username');
    await loginPage.fillPassword('demo-password');
    console.log('‚úÖ Form filled using page object methods!');
  });

  test('üìñ Lesson 3: Methods - Page Actions', async ({ page }) => {
    console.log('='.repeat(60));
    console.log('üìñ LESSON 3: Understanding Methods');
    console.log('='.repeat(60));
    
    const loginPage = new LoginPage(page);
    await loginPage.navigateToLoginPage();
    
    console.log('üé¨ Page objects have different types of methods:');
    console.log('');
    console.log('1Ô∏è‚É£ Simple Actions:');
    console.log('   - fillUsername()');
    console.log('   - fillPassword()');
    console.log('   - clickLoginButton()');
    console.log('');
    
    console.log('2Ô∏è‚É£ Composite Actions:');
    console.log('   - login() - combines fill username + password + click');
    console.log('');
    
    console.log('3Ô∏è‚É£ Information Getters:');
    console.log('   - getErrorMessage()');
    console.log('   - getSuccessMessage()');
    console.log('   - getFormValues()');
    console.log('');
    
    console.log('üéØ Demonstrating composite action...');
    await loginPage.login(validCredentials.username, validCredentials.password);
    console.log('‚úÖ One method call performed multiple steps!');
  });

  test('üìñ Lesson 4: Inheritance from BasePage', async ({ page }) => {
    console.log('='.repeat(60));
    console.log('üìñ LESSON 4: Understanding Inheritance');
    console.log('='.repeat(60));
    
    const loginPage = new LoginPage(page);
    await loginPage.navigateToLoginPage();
    
    console.log('üèóÔ∏è LoginPage extends BasePage');
    console.log('üìã This means LoginPage inherits all BasePage methods:');
    console.log('');
    console.log('From BasePage:');
    console.log('   üåê goto() - navigation');
    console.log('   ‚è≥ waitForPageLoad() - timing');
    console.log('   üñ±Ô∏è clickElement() - interactions');
    console.log('   ‚å®Ô∏è fillInput() - form filling');
    console.log('   ‚úÖ assertElementVisible() - verification');
    console.log('');
    
    console.log('Plus LoginPage-specific methods:');
    console.log('   üîê login() - login workflow');
    console.log('   üìù fillUsername() - specific to login form');
    console.log('   üîç assertLoginSuccess() - login-specific verification');
    console.log('');
    
    const currentUrl = await loginPage.getCurrentUrl();
    console.log('üåê Current URL (using inherited method): ' + currentUrl.substring(0, 50) + '...');
  });

  test('üìñ Lesson 5: Assertions and Verification', async ({ page }) => {
    console.log('='.repeat(60));
    console.log('üìñ LESSON 5: Understanding Assertions');
    console.log('='.repeat(60));
    
    const loginPage = new LoginPage(page);
    await loginPage.navigateToLoginPage();
    
    console.log('‚úÖ Page objects provide intelligent assertions:');
    console.log('');
    console.log('üîç assertLoginPageLoaded() checks:');
    console.log('   - Username field is visible');
    console.log('   - Password field is visible');
    console.log('   - Login button is visible');
    console.log('   - Page title is correct');
    console.log('');
    
    await loginPage.assertLoginPageLoaded();
    console.log('‚úÖ Login page assertion passed!');
    console.log('');
    
    await loginPage.login(validCredentials.username, validCredentials.password);
    
    console.log('üîç assertLoginSuccess() checks:');
    console.log('   - Success message is visible');
    console.log('   - Success message contains correct text');
    console.log('   - Logout link is present');
    console.log('');
    
    await loginPage.assertLoginSuccess();
    console.log('‚úÖ Login success assertion passed!');
  });

  test('üìñ Lesson 6: Test Data Management', async ({ page }) => {
    console.log('='.repeat(60));
    console.log('üìñ LESSON 6: Understanding Test Data');
    console.log('='.repeat(60));
    
    const loginPage = new LoginPage(page);
    await loginPage.navigateToLoginPage();
    
    console.log('üìä Test data is centralized in testData.ts:');
    console.log('');
    console.log('export const validCredentials = {');
    console.log('  username: "tomsmith",');
    console.log('  password: "SuperSecretPassword!"');
    console.log('};');
    console.log('');
    
    console.log('üí° Benefits:');
    console.log('   ‚úÖ Single source of truth for test data');
    console.log('   ‚úÖ Easy to update credentials for all tests');
    console.log('   ‚úÖ Different data sets for different scenarios');
    console.log('');
    
    console.log('üéØ Using centralized test data...');
    await loginPage.login(validCredentials.username, validCredentials.password);
    await loginPage.assertLoginSuccess();
    console.log('‚úÖ Login successful with centralized data!');
  });

  test('üìñ Lesson 7: Complete POM Workflow', async ({ page }) => {
    console.log('='.repeat(60));
    console.log('üìñ LESSON 7: Complete POM Workflow');
    console.log('='.repeat(60));
    
    console.log('üîÑ This is how a complete POM test works:');
    console.log('');
    
    console.log('Step 1: Create page object');
    const loginPage = new LoginPage(page);
    console.log('‚úÖ LoginPage instance created');
    
    console.log('');
    console.log('Step 2: Navigate to page');
    await loginPage.navigateToLoginPage();
    console.log('‚úÖ Navigated to login page');
    
    console.log('');
    console.log('Step 3: Verify page loaded');
    await loginPage.assertLoginPageLoaded();
    console.log('‚úÖ Page loading verified');
    
    console.log('');
    console.log('Step 4: Perform user actions');
    await loginPage.login(validCredentials.username, validCredentials.password);
    console.log('‚úÖ Login action completed');
    
    console.log('');
    console.log('Step 5: Verify results');
    await loginPage.assertLoginSuccess();
    console.log('‚úÖ Success verified');
    
    console.log('');
    console.log('Step 6: Additional actions');
    await loginPage.clickLogoutLink();
    console.log('‚úÖ Logout completed');
    
    console.log('');
    console.log('Step 7: Final verification');
    await loginPage.assertLoginPageLoaded();
    console.log('‚úÖ Back to login page verified');
    
    console.log('');
    console.log('üéâ Complete POM workflow finished!');
    console.log('üí° Notice how readable and maintainable this is!');
  });

  test('üìñ Lesson 8: POM vs Traditional Comparison', async ({ page }) => {
    console.log('='.repeat(60));
    console.log('üìñ LESSON 8: POM vs Traditional Comparison');
    console.log('='.repeat(60));
    
    console.log('‚ùå Traditional approach (without POM):');
    console.log('');
    console.log('await page.goto("https://the-internet.herokuapp.com/login");');
    console.log('await page.fill("#username", "tomsmith");');
    console.log('await page.fill("#password", "SuperSecretPassword!");');
    console.log('await page.click("button[type=submit]");');
    console.log('await expect(page.locator(".flash.success")).toBeVisible();');
    console.log('');
    
    console.log('‚úÖ POM approach:');
    console.log('');
    console.log('const loginPage = new LoginPage(page);');
    console.log('await loginPage.navigateToLoginPage();');
    console.log('await loginPage.login(validCredentials.username, validCredentials.password);');
    console.log('await loginPage.assertLoginSuccess();');
    console.log('');
    
    console.log('üéØ Demonstrating POM approach...');
    const loginPage = new LoginPage(page);
    await loginPage.navigateToLoginPage();
    await loginPage.login(validCredentials.username, validCredentials.password);
    await loginPage.assertLoginSuccess();
    
    console.log('');
    console.log('üèÜ POM Benefits:');
    console.log('   üìñ More readable - reads like business language');
    console.log('   üîß More maintainable - changes in one place');
    console.log('   ‚ôªÔ∏è More reusable - same methods across tests');
    console.log('   üèóÔ∏è Better structure - organized and scalable');
    console.log('   üß™ Easier testing - focus on scenarios, not implementation');
  });
});

/**
 * üéØ NEXT STEPS FOR LEARNING:
 * 
 * 1. Run this test file: npx playwright test tests/pom-learning-examples.spec.ts
 * 2. Read through the console output to understand each concept
 * 3. Look at the actual page object files (LoginPage.ts, BasePage.ts)
 * 4. Try creating your own page object for a different website
 * 5. Experiment with adding new methods to existing page objects
 * 
 * üìö Additional Learning Resources:
 * - Read POM_LEARNING_GUIDE.md for comprehensive guide
 * - Look at other test files to see POM in action
 * - Try the hands-on exercises in the learning guide
 */